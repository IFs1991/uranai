---
# 占いサービス決済機能 仕様書
payjp_integration:
  name: ライフサイクルポテンシャル占術決済システム
  version: 1.0.0
  description: Pay.jp APIを使用したクレジットカード決済機能
  payment_amount: 10000
  currency: jpy

# フロントエンド実装
frontend:
  sdk:
    name: PAY.JP JavaScript SDK
    loading: 遅延読み込み (DOMContentLoaded後)
    url: "https://js.pay.jp/v2/pay.js"

  card_tokenization:
    function: createCardToken
    flow:
      - カード番号/有効期限/CVC入力
      - 入力値のバリデーション
      - Pay.jpへの送信とトークン取得
      - トークンの一時保持（非永続）
    three_d_secure:
      enabled: true
      workflow: subwindow
      required_fields:
        - name: カード名義（ローマ字）
        - email: メールアドレス
        - phone: 電話番号（任意、メールがある場合）
      implementation:
        payjp_js: |
          payjp.createToken(cardElement, {
            three_d_secure: true,
            card: {
              name: name,
              email: email,
              phone: phone
            }
          })
        checkout: |
          <script
            type="text/javascript"
            src="https://checkout.pay.jp/"
            class="payjp-button"
            data-payjp-key="PAYJP_PUBLIC_KEY"
            data-payjp-three-d-secure="true"
            data-payjp-three-d-secure-workflow="subwindow"
            data-payjp-extra-attribute-email
            data-payjp-extra-attribute-phone
          ></script>

  payment_form:
    required_fields:
      - name: 氏名（漢字）
      - email: メールアドレス
      - birthDate: 生年月日
      - birthplace: 出生地（任意）
    validation:
      client_side: true
      patterns:
        email: 標準的なメールアドレス形式
        birthDate: YYYY-MM-DD形式
    error_display: フォーム下部にメッセージ表示

# バックエンド実装
backend:
  api_endpoints:
    standard_payment:
      path: /api/process-payment
      method: POST
      description: 標準の決済処理（認証と決済を同時実行）

    authorization_only:
      path: /api/process-payment
      method: POST
      description: 与信枠確保のみ（認証のみ実行）
      additional_params:
        authOnly: true
        expiryDays: 与信枠の有効期限（1〜60日、デフォルト7日）

    capture_payment:
      path: /api/process-payment/capture/{chargeId}
      method: POST
      description: 確保された与信枠の決済確定
      path_params:
        chargeId: 与信枠IDをパスに含める
      optional_params:
        amount: 確定金額（与信確保時の金額以下、省略時は全額確定）

    release_authorization:
      path: /api/process-payment/release/{chargeId}
      method: POST
      description: 確保された与信枠の解放
      path_params:
        chargeId: 与信枠IDをパスに含める

    check_3d_secure:
      path: /api/process-payment/check-3d-secure/{tokenId}
      method: GET
      description: 3Dセキュアステータスの確認
      path_params:
        tokenId: Pay.jpトークンID

    authorize_3d_secure:
      path: /api/process-payment/authorize-3d-secure
      method: POST
      description: 3Dセキュア認証を開始するURL生成
      request_body:
        tokenId: Pay.jpトークンID
        returnUrl: 認証後のリダイレクト先URL

    complete_3d_secure:
      path: /api/process-payment/complete-3d-secure/{tokenId}
      method: POST
      description: 3Dセキュア認証の完了処理
      path_params:
        tokenId: Pay.jpトークンID

  request_body:
    token: Pay.jpで生成されたトークン
    userData:
      name: ユーザー名
      email: メールアドレス
      birthDate: 生年月日
      birthplace: 出生地（任意）
    authOnly: 認証のみ実行フラグ（true/false）
    expiryDays: 与信枠の有効期限（日数）

  payjp_api:
    integration: lib/payjp-api.js
    functions:
      createCharge:
        description: 通常の決済処理（認証と決済を同時実行）
        parameters:
          token: Pay.jpトークン
          amount: 10000
          currency: jpy
          description: ライフサイクル・ポテンシャル占術 詳細鑑定PDF
          metadata:
            customer_name: ユーザー名
            customer_email: メールアドレス
            birthDate: 生年月日
            birthplace: 出生地

      createAuthorization:
        description: 与信枠確保のみ（支払いを確定しない）
        parameters:
          token: Pay.jpトークン
          amount: 10000
          currency: jpy
          description: ライフサイクル・ポテンシャル占術 詳細鑑定PDF（与信枠確保）
          metadata:
            customer_name: ユーザー名
            customer_email: メールアドレス
            birthDate: 生年月日
            birthplace: 出生地
          expiryDays: 有効期限（1〜60日）
        note: capture=false, expiry_daysパラメータを使用

      capturePayment:
        description: 与信枠が確保された支払いを確定
        parameters:
          chargeId: 与信枠が確保された支払いID
          amount: 確定金額（オプション、与信枠確保時の金額以下）

      releaseAuthorization:
        description: 確保された与信枠を解放
        parameters:
          chargeId: 与信枠が確保された支払いID

      getTokenDetails:
        description: トークンの詳細情報を取得
        parameters:
          tokenId: Pay.jpトークンID

      check3DSecureStatus:
        description: 3Dセキュア認証が必要なトークンのステータスを確認
        parameters:
          tokenId: Pay.jpトークンID
        return_value: 3Dセキュアステータス情報（status, needsAuth, redirectUrl）

      generate3DSecureUrl:
        description: 3Dセキュア認証用のリダイレクトURLを生成
        parameters:
          tokenId: Pay.jpトークンID
          returnUrl: 認証後のリダイレクト先URL
        return_value: 3Dセキュア認証用のURL

      complete3DSecure:
        description: 3Dセキュア認証完了処理を行う
        parameters:
          tokenId: Pay.jpトークンID
        return_value: 完了後のトークン情報

  timeout_handling:
    duration: 15000 # 15秒
    strategy: Promise.race

  responses:
    standard_payment:
      success:
        status_code: 200
        body:
          success: true
          message: 決済が完了しました。PDF生成を開始します。
          paymentId: Pay.jpの決済ID
          transactionId: 内部生成のトランザクションID
      needs_3d_secure:
        status_code: 202
        body:
          success: false
          needsThreeDSecure: true
          tokenId: Pay.jpのトークンID
          threeDSecureStatus: 3Dセキュアステータス情報
          message: 3Dセキュア認証が必要です。認証を完了後、決済を続行してください。

    authorization_only:
      success:
        status_code: 200
        body:
          success: true
          message: 与信枠の確保が完了しました。
          authorizationId: 与信枠確保ID
          transactionId: 内部生成のトランザクションID
          expiryDays: 有効期限（日数）
      needs_3d_secure:
        status_code: 202
        body:
          success: false
          needsThreeDSecure: true
          tokenId: Pay.jpのトークンID
          threeDSecureStatus: 3Dセキュアステータス情報
          message: 3Dセキュア認証が必要です。認証を完了後、与信枠確保を続行してください。

    capture_payment:
      success:
        status_code: 200
        body:
          success: true
          message: 支払いが確定されました。
          paymentId: 支払いID
          amount: 元の金額
          capturedAmount: 確定された金額
          refundedAmount: 差額（返金された金額）

    release_authorization:
      success:
        status_code: 200
        body:
          success: true
          message: 与信枠が解放されました。
          chargeId: 解放された与信枠ID
          refundedAmount: 解放された金額

    check_3d_secure:
      success:
        status_code: 200
        body:
          success: true
          tokenId: Pay.jpのトークンID
          threeDSecureStatus: 3Dセキュアステータス情報

    authorize_3d_secure:
      success:
        status_code: 200
        body:
          success: true
          tokenId: Pay.jpのトークンID
          authUrl: 3Dセキュア認証ページURL

    complete_3d_secure:
      success:
        status_code: 200
        body:
          success: true
          tokenId: Pay.jpのトークンID
          threeDSecureStatus: 完了後の3Dセキュアステータス
          completedToken: 完了後のトークン情報

    error:
      validation_error:
        status_code: 400
        error_types:
          - 決済トークンが見つかりません
          - ユーザー情報が必要です
          - ユーザー情報が不完全です
      timeout_error:
        status_code: 408
        message: 決済処理がタイムアウトしました
      api_error:
        status_code: 400
        message: 決済サービスでエラーが発生しました
      server_error:
        status_code: 500
        message: 決済処理中にサーバー内部エラーが発生しました
      threeDSecureError:
        status_code: 400
        message: 3Dセキュア認証でエラーが発生しました

# KVストア連携
kv_storage:
  library: lib/kv-store.js
  data_structures:
    standard_payment:
      key_format: payment:{payment_id}
      value:
        id: Pay.jpの決済ID
        amount: 決済金額
        status: 決済状態
        userData: ユーザー情報オブジェクト
        timestamp: 決済日時（ISO形式）
        transactionId: 内部トランザクションID
      ttl: 2592000 # 30日（秒）

    authorization:
      key_format: auth:{authorization_id}
      value:
        id: 与信枠ID
        amount: 金額
        status: 状態（authorized/captured/released）
        userData: ユーザー情報
        timestamp: 与信枠確保日時（ISO形式）
        transactionId: 内部トランザクションID
        expiryDate: 有効期限日時（ISO形式）
      ttl: 5184000 # 最大60日（秒）

    threeDSecureSession:
      key_format: 3dsession:{token_id}
      value:
        tokenId: Pay.jpトークンID
        userData: ユーザー情報
        amount: 金額
        currency: 通貨
        description: 説明
        authOnly: 与信枠確保のみフラグ
        expiryDays: 与信枠有効期限（与信枠確保の場合）
        timestamp: 作成日時（ISO形式）
      ttl: 3600 # 1時間（秒）

# 自動PDF生成リクエスト
auto_pdf_generation:
  enabled: true
  triggers:
    - 標準決済完了時
    - 与信枠確定時（userData情報がある場合）
  request:
    endpoint: /api/generate-pdf
    method: POST
    body:
      userData: ユーザー情報
      paymentId: Pay.jpの決済ID
      transactionId: 内部トランザクションID
      email: ユーザーのメールアドレス
  error_handling:
    strategy: ログ記録のみ（決済成功扱い）

# セキュリティ対策
security:
  pci_dss: Pay.jpトークン化により準拠
  connection: HTTPS必須
  api_key_storage: 環境変数
  input_validation: サーバーサイドでの検証
  error_messages: 本番環境では詳細エラーを非表示
  three_d_secure:
    enabled: true
    workflow: subwindow
    fallback: サブウィンドウが開けない環境ではリダイレクト型に切り替え
    status_handling:
      verified: 完全な認証成功
      attempted: 認証試行（完全認証できない場合でも続行可能）
      unverified: 未認証
      error: 認証エラー
    configuration: 管理画面 > API設定 > 3Dセキュア で設定可能

# 開発・テスト環境
development:
  test_cards_categories:
    valid_cards:
      description: トークン作成・決済とも成功するカード
      cards:
        - number: 4242424242424242
          brand: Visa
          description: すべての処理が成功する標準テストカード
        - number: 5555555555554444
          brand: Mastercard
          description: すべての処理が成功する標準テストカード
        - number: 3530111333300000
          brand: JCB
          description: すべての処理が成功する標準テストカード
        - number: 3566002020140000
          brand: JCB
          description: すべての処理が成功する標準テストカード
        - number: 378282246310005
          brand: American Express
          description: すべての処理が成功する標準テストカード
        - number: 36700102000000
          brand: Diners Club
          description: すべての処理が成功する標準テストカード

    token_error_cards:
      description: トークン作成時にエラーが発生するカード
      cards:
        - number: 4000000000000000
          brand: Visa
          error_code: card_declined
          description: カード拒否エラー（トークン化時）
        - number: 4000000000000101
          brand: Visa
          error_code: expired_card
          description: 有効期限切れカード
        - number: 4000000000000068
          brand: Visa
          error_code: invalid_cvc
          description: 不正なセキュリティコード
        - number: 4000000000000127
          brand: Visa
          error_code: invalid_number
          description: 不正なカード番号

    payment_error_cards:
      description: トークン作成は成功するが決済時にエラーが発生するカード
      cards:
        - number: 4000000000000341
          brand: Visa
          error_code: card_declined
          description: カード拒否エラー（決済時）
        - number: 4000000000000036
          brand: Visa
          error_code: insufficient_funds
          description: 残高不足
        - number: 4000000000000010
          brand: Visa
          error_code: processing_error
          description: 処理エラー
        - number: 4000000000000044
          brand: Visa
          error_code: restricted_card
          description: 制限付きカード
        - number: 4000000000000028
          brand: Visa
          error_code: lifetime_exceeded
          description: 利用限度額超過
          threshold: 10000

    special_status_cards:
      description: 特殊なステータスを返すカード
      cards:
        - number: 4242424242424242
          brand: Visa
          special_case: authenticating
          description: 3Dセキュア認証が必要
          parameters:
            threed_secure_required: true
        - number: 4000000000000000
          brand: Visa
          special_case: pending
          description: 処理保留
          parameters:
            status: pending

  card_brands:
    - name: Visa
      numbers: [4242424242424242, 4000000000000000]
      pattern: "^4[0-9]{12}(?:[0-9]{3})?$"
    - name: Mastercard
      numbers: [5555555555554444, 5200828282828210]
      pattern: "^5[1-5][0-9]{14}$"
    - name: American Express
      numbers: [378282246310005, 371449635398431]
      pattern: "^3[47][0-9]{13}$"
    - name: JCB
      numbers: [3566002020140000, 3530111333300000]
      pattern: "^(?:2131|1800|35\\d{3})\\d{11}$"
    - name: Diners Club
      numbers: [36700102000000, 36148900647913]
      pattern: "^3(?:0[0-5]|[68][0-9])[0-9]{11}$"

  environment_variables:
    PAYJP_PUBLIC_KEY: pk_test_xxxx
    PAYJP_SECRET_KEY: sk_test_xxxx

  test_tips:
    - カード番号と有効期限だけでなく、CVCも正しく設定する
    - 有効期限は常に未来の日付を使用する
    - トークン化テストと決済テストは常にセットで行う
    - エラー処理のテストには該当するテストカードを使用する
    - 3Dセキュア対応のテストは特殊なテストケースで行う
    - 3Dセキュアを行うためのテストカードはないため、three_d_secure オプションが指定されると全てのテストカードで3Dセキュア処理が行われる

# 動作フロー
flow_examples:
  standard_payment:
    description: 通常の決済フロー（認証と決済を同時実行）
    steps:
      - フロントエンドでカード情報をトークン化
      - サーバーに決済リクエスト（token, userData）を送信
      - サーバーがPay.jpで決済処理（認証と決済同時実行）
      - 決済情報をKVストアに保存
      - PDF生成リクエストを自動実行
      - クライアントに結果を返却

  two_step_payment:
    description: 2段階決済フロー（認証と決済を分離）
    steps:
      - フロントエンドでカード情報をトークン化
      - サーバーに与信枠確保リクエスト（token, userData, authOnly=true）を送信
      - サーバーがPay.jpで与信枠確保処理（認証のみ実行）
      - 与信枠情報をKVストアに保存
      - クライアントに結果を返却
      - （後日または条件成立時）サーバーに支払い確定リクエストを送信
      - サーバーがPay.jpで支払い確定処理
      - 決済情報をKVストアに更新
      - PDF生成リクエストを自動実行
      - クライアントに結果を返却

  three_d_secure_flow:
    description: 3Dセキュア認証を含む決済フロー
    steps:
      - フロントエンドでカード情報と追加項目（名義・メールアドレス）を入力
      - 3Dセキュアオプションを有効にしてトークン化
      - サーバーに決済リクエスト（token, userData）を送信
      - サーバーがトークンの3Dセキュアステータスを確認
      - ステータスが「unverified」の場合、クライアントに3Dセキュア認証が必要との応答
      - クライアントが3Dセキュア認証URLの生成をリクエスト
      - ユーザーをカード会社の3Dセキュア認証画面にリダイレクト
      - ユーザーが認証を完了し、リダイレクト先URLに戻る
      - クライアントがサーバーに3Dセキュア認証完了を通知
      - サーバーがPay.jpで3Dセキュア完了処理
      - 認証完了後、元の決済または与信枠確保処理を実行
      - 決済情報をKVストアに保存
      - PDF生成リクエストを自動実行
      - クライアントに結果を返却
    note: サブウィンドウ型の場合はトークン化と同時に認証が完了するため、サーバー側での追加処理は不要

# 利用シナリオ
use_cases:
  - title: 即時決済
    description: ユーザーが通常フローで商品/サービスを購入
    flow_type: standard_payment

  - title: 仮押さえ後確定
    description: 在庫確認後に支払い確定（在庫がない場合は与信枠解放）
    flow_type: two_step_payment

  - title: 分割金額での確定
    description: 与信枠確保後、確定時に金額を調整（元の金額以下）
    flow_type: two_step_payment
    notes: capturePaymentでamountパラメータを指定

  - title: 3Dセキュア認証付き決済
    description: セキュリティ強化のためカード所有者認証を追加
    flow_type: three_d_secure_flow
    notes: フィッシング詐欺対策や不正利用防止に効果的

# 3Dセキュア認証：トークンベース（非推奨）
three_d_secure_token_based:
  deprecated: true
  description: "トークン作成時の3Dセキュアは非推奨です。代わりに支払い作成時の3Dセキュア認証を使用してください。"
  frontend_implementation:
    checkout_sdk:
      deprecated: true
      note: "トークン作成時の3Dセキュアは非推奨です。代わりに支払い作成時（charge作成時）の3Dセキュアを使用してください。"
    payjp_js_sdk:
      deprecated: true
      note: "トークン作成時の3Dセキュアは非推奨です。代わりに支払い作成時（charge作成時）の3Dセキュアを使用してください。"
    mobile_sdk:
      deprecated: true
      note: "トークン作成時の3Dセキュアは非推奨です。代わりに支払い作成時（charge作成時）の3Dセキュアを使用してください。"

# 3Dセキュア認証：支払い作成時（推奨）
payment_3d_secure:
  description: "支払い作成時（charge作成時）の3Dセキュア認証。これは推奨される実装方法です。"
  frontend_implementation:
    checkout_sdk:
      example: |
        // Checkoutを使用した3Dセキュア認証付き支払い
        const checkout = new PayjpCheckout({
          publicKey: 'pk_test_xxxx',
          // 支払い完了時のコールバック
          onCompleted: (result) => {
            if (result.error) {
              console.error(result.error);
              // エラー処理
            } else {
              // 支払い成功
              console.log('支払いID:', result.id);
              if (result.card) {
                console.log('カード情報:', result.card.brand, result.card.last4);
              }
            }
          }
        });

        // 3Dセキュア認証付き支払いを開始
        checkout.createPayment({
          amount: 1000,
          currency: 'jpy',
          threeDSecure: true,  // 3Dセキュア認証を有効化
          name: 'カード名義人',
          email: 'test@example.com',
          description: '商品の説明'
        });
    payjp_js_sdk:
      example: |
        // PayjpのJSライブラリを使用
        const payjp = Payjp('pk_test_xxxx');

        // 支払いを作成
        async function createPayment() {
          try {
            // 支払い作成APIを呼び出し
            const response = await fetch('/api/create-payment', {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({
                amount: 1000,
                currency: 'jpy',
                threeDSecure: true,  // 3Dセキュア認証を有効化
                name: 'カード名義人',
                email: 'test@example.com'
              })
            });

            const result = await response.json();

            if (result.threeDSecureStatus === 'unverified') {
              // 3Dセキュア認証が必要な場合
              if (result.threeDSecureUrl) {
                // サブウィンドウでの認証
                payjp.threeDSecure.subWindow({
                  url: result.threeDSecureUrl,
                  callback: onThreeDSecureComplete
                });
                // または、リダイレクトでの認証
                // window.location.href = result.threeDSecureUrl;
              }
            } else {
              // 3Dセキュア認証が不要または既に完了している場合
              onPaymentComplete(result);
            }
          } catch (error) {
            console.error('支払い作成エラー:', error);
          }
        }

        // 3Dセキュア認証完了後のコールバック
        function onThreeDSecureComplete(result) {
          if (result.success) {
            // 3Dセキュア認証成功
            onPaymentComplete(result.payment);
          } else {
            // 3Dセキュア認証失敗
            console.error('3Dセキュア認証エラー:', result.error);
          }
        }

        // 支払い完了時の処理
        function onPaymentComplete(payment) {
          console.log('支払い完了:', payment.id);
        }
    mobile_sdk:
      example: |
        // モバイルSDKでの3Dセキュア認証付き支払い作成の例（Android - Kotlin）

        // 支払い作成リクエスト
        val threeDSecureParams = ThreeDSecureParams(
          name = "カード名義人",
          email = "test@example.com"
        )

        PayjpApi.createPayment(
          context = context,
          amount = 1000,
          currency = "jpy",
          threeDSecure = true,  // 3Dセキュア認証を有効化
          threeDSecureParams = threeDSecureParams,
          onSuccess = { payment ->
            // 支払い成功時の処理
            Log.d("Payment", "Success: ${payment.id}")
          },
          onError = { exception ->
            // エラー時の処理
            Log.e("Payment", "Error: ${exception.message}")
          },
          on3DSecureRequired = { url, payment ->
            // 3Dセキュア認証が必要な場合、認証ページを表示
            // WebViewで認証URLを開く
            showWebView(url, payment.id)
          }
        )

        // WebViewでの3Dセキュア認証完了後のコールバック
        fun onThreeDSecureCompleted(paymentId: String) {
          // 支払い状態を確認
          PayjpApi.getPayment(
            paymentId = paymentId,
            onSuccess = { payment ->
              if (payment.status == "succeeded") {
                // 支払い完了
                Log.d("Payment", "3D Secure completed successfully")
              } else {
                // 支払い失敗
                Log.e("Payment", "Payment failed after 3D Secure")
              }
            },
            onError = { exception ->
              Log.e("Payment", "Error checking payment: ${exception.message}")
            }
          )
        }

# 3Dセキュア認証フロー図（支払い作成時）
# 注: トークン作成時の3Dセキュアは非推奨です。代わりに以下の支払い作成時の3Dセキュア認証フローを使用してください。
payment_3d_secure_flow:
  description: |
    3Dセキュア認証フロー（支払い作成時）：
    1. クライアントが支払い情報とともに3Dセキュア有効フラグを送信
    2. サーバーが支払いを作成し、3Dセキュア認証が必要か確認
    3. 3Dセキュア認証が必要な場合、認証URLを返す
    4. クライアントが認証URLで3Dセキュア認証を実行（サブウィンドウまたはリダイレクト）
    5. 認証完了後、サーバーが支払い完了処理を実行
    6. クライアントに支払い結果を返す

  flow_diagram: |
    ┌─────────┐                 ┌─────────┐               ┌────────┐              ┌─────────────┐
    │ クライアント │                 │ アプリサーバー │               │ Pay.jp  │              │ 3Dセキュアサーバー │
    └─────┬───┘                 └─────┬───┘               └────┬───┘              └───────┬─────┘
          │                           │                        │                         │
          │ 支払い作成リクエスト(3DS=true)│                        │                         │
          │ ────────────────> │                        │                         │
          │                           │                        │                         │
          │                           │ 支払い作成(3DS=true)   │                         │
          │                           │ ────────────────> │                         │
          │                           │                        │                         │
          │                           │                        │ 3Dセキュア認証が必要     │
          │                           │                        │ ──────────────────> │
          │                           │                        │                         │
          │                           │ 支払い作成結果(3DS=unverified) │                │
          │                           │ <───────────────── │                         │
          │                           │                        │                         │
          │ 3Dセキュア認証URL        │                        │                         │
          │ <───────────────── │                        │                         │
          │                           │                        │                         │
          │ 3Dセキュア認証ページにリダイレクト │                 │                         │
          │ ─────────────────────────────────────────────────> │
          │                           │                        │                         │
          │ <───────────────────────────────────────────────── │
          │ カード発行会社認証ページ   │                        │                         │
          │                           │                        │                         │
          │ 認証完了後のリダイレクト   │                        │                         │
          │ ────────────────> │                        │                         │
          │                           │                        │                         │
          │                           │ 支払い完了処理         │                         │
          │                           │ ────────────────> │                         │
          │                           │                        │                         │
          │                           │ 支払い完了結果(3DS=verified) │                  │
          │                           │ <───────────────── │                         │
          │                           │                        │                         │
          │ 支払い完了通知            │                        │                         │
          │ <───────────────── │                        │                         │
          │                           │                        │                         │
</code_block_to_apply_changes_from>