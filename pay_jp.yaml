# Pay.jp決済機能の実装仕様

overview:
  title: "Pay.jp決済システム統合"
  description: "ライフサイクル・ポテンシャル占術サービスにおけるクレジットカード決済の実装"
  base_price: 10000
  currency: "jpy"
  product_description: "ライフサイクル・ポテンシャル占術 詳細鑑定PDF"

frontend:
  components:
    sdk_loading:
      function_name: "loadPayJpSDK"
      script_url: "https://js.pay.jp/v2/pay.js"
      description: "Pay.jp JavaScriptライブラリの動的読み込み"
      implementation: |
        const loadPayJpSDK = () => {
          return new Promise((resolve, reject) => {
            if (window.Payjp) {
              payjpInstance = window.Payjp(PAYJP_PUBLIC_KEY);
              resolve(payjpInstance);
              return;
            }

            const script = document.createElement('script');
            script.src = 'https://js.pay.jp/v2/pay.js';
            script.async = true;
            script.onload = () => {
              payjpInstance = window.Payjp(PAYJP_PUBLIC_KEY);
              resolve(payjpInstance);
            };
            script.onerror = () => {
              reject(new Error('pay.jpの読み込みに失敗しました'));
            };
            document.head.appendChild(script);
          });
        }

    payment_form:
      element_id: "payment-form"
      fields:
        - id: "card-number"
          label: "カード番号"
          type: "cardNumber"
        - id: "card-expiry"
          label: "有効期限"
          type: "cardExpiry"
        - id: "card-cvc"
          label: "セキュリティコード"
          type: "cardCvc"
      implementation: |
        const setupPaymentForm = async () => {
          if (!payjpInstance) {
            try {
              await loadPayJpSDK();
            } catch (error) {
              showError('general-error', 'pay.jpの読み込みに失敗しました。ネットワーク接続を確認してください。');
              return;
            }
          }

          const elements = payjpInstance.elements();

          const cardNumber = elements.create('cardNumber');
          const cardExpiry = elements.create('cardExpiry');
          const cardCvc = elements.create('cardCvc');

          cardNumber.mount('#card-number');
          cardExpiry.mount('#card-expiry');
          cardCvc.mount('#card-cvc');

          // 入力エラー監視
          cardNumber.on('change', (event) => {
            handleElementChange(event, 'card-number-error');
          });

          cardExpiry.on('change', (event) => {
            handleElementChange(event, 'card-expiry-error');
          });

          cardCvc.on('change', (event) => {
            handleElementChange(event, 'card-cvc-error');
          });

          paymentForm = {
            elements,
            cardNumber,
            cardExpiry,
            cardCvc
          };
        }

    tokenization:
      function_name: "createCardToken"
      description: "カード情報をPay.jpサーバーで安全にトークン化"
      implementation: |
        const createCardToken = async (cardForm) => {
          try {
            const tokenResult = await payjpInstance.createToken(cardForm.cardNumber);
            return tokenResult;
          } catch (error) {
            console.error('トークン化エラー:', error);
            throw error;
          }
        }

    payment_submission:
      function_name: "handlePaymentSubmit"
      description: "支払いフォーム送信とサーバーサイド処理の連携"
      process:
        - "フォーム送信イベントの処理"
        - "カード情報のトークン化"
        - "バックエンドAPIへのトークン送信"
        - "支払い結果の処理"
        - "PDF生成リクエストへの受け渡し"
      implementation: |
        const handlePaymentSubmit = async (event) => {
          event.preventDefault();

          if (isProcessing) return;

          // エラーメッセージをクリア
          const errorElements = paymentModal.querySelectorAll('.payment-error');
          errorElements.forEach(el => {
            el.textContent = '';
          });

          setPaymentProcessing(true);

          try {
            // カード情報をトークン化
            const tokenResult = await payjpInstance.createToken(paymentForm.cardNumber);

            if (tokenResult.error) {
              throw new Error(tokenResult.error.message);
            }

            // サーバーへ決済リクエスト送信
            const paymentResult = await processPayment({
              token: tokenResult.id,
              amount: 10000,
              userData: userFormData
            });

            // 決済成功
            if (paymentResult.success) {
              // PDF生成を開始
              startPdfGeneration(paymentResult.paymentId);
            } else {
              throw new Error(paymentResult.message || '決済処理に失敗しました');
            }

          } catch (error) {
            console.error('Payment error:', error);
            setPaymentProcessing(false);
            showError('general-error', error.message || '決済処理中にエラーが発生しました');
          }
        }

    ui_states:
      modal:
        id: "payment-modal"
        components:
          - "header"
          - "payment_form"
          - "error_messages"
          - "submit_button"
      loading_states:
        function_name: "setPaymentProcessing"
        implementation: |
          const setPaymentProcessing = (processing) => {
            isProcessing = processing;

            const submitButton = paymentModal.querySelector('#payment-submit');
            const buttonText = submitButton.querySelector('.button-text');
            const buttonLoader = submitButton.querySelector('.button-loader');

            if (processing) {
              submitButton.disabled = true;
              buttonText.classList.add('hidden');
              buttonLoader.classList.remove('hidden');
            } else {
              submitButton.disabled = false;
              buttonText.classList.remove('hidden');
              buttonLoader.classList.add('hidden');
            }
          }

backend:
  components:
    api_endpoint:
      path: "/api/process-payment"
      method: "POST"
      request_body:
        - name: "token"
          type: "string"
          description: "Pay.jpから取得したカード情報トークン"
        - name: "userData"
          type: "object"
          description: "ユーザー情報（名前、メールアドレスなど）"

    payment_processing:
      function_name: "createCharge"
      description: "Pay.jp APIを使用した決済処理"
      implementation: |
        // payjp-api.js モジュール内の実装
        export const createCharge = async ({ token, amount, currency, description, metadata }) => {
          try {
            const response = await fetch('https://api.pay.jp/v1/charges', {
              method: 'POST',
              headers: {
                'Authorization': `Basic ${Buffer.from(process.env.PAYJP_SECRET_KEY + ':').toString('base64')}`,
                'Content-Type': 'application/x-www-form-urlencoded'
              },
              body: new URLSearchParams({
                card: token,
                amount: amount,
                currency: currency || 'jpy',
                description: description || '',
                metadata: metadata ? JSON.stringify(metadata) : ''
              })
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.error.message || '決済処理に失敗しました');
            }

            return await response.json();
          } catch (error) {
            console.error('Pay.jp API error:', error);
            throw error;
          }
        }

    request_handler:
      file: "api/process-payment.js"
      description: "決済リクエストを処理するサーバーレス関数"
      implementation: |
        export default async function handler(req, res) {
          // POSTメソッド以外は許可しない
          if (req.method !== 'POST') {
            return res.status(405).json({
              success: false,
              error: 'Method Not Allowed'
            });
          }

          // タイムアウト処理の設定
          const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Request timeout')), TIMEOUT_DURATION);
          });

          try {
            // リクエストボディからトークンとユーザー情報を取得
            const { token, userData } = req.body;

            // 必須項目の検証
            if (!token) {
              return res.status(400).json({
                success: false,
                error: '決済トークンが見つかりません'
              });
            }

            if (!userData || !userData.name || !userData.email || !userData.birthDate) {
              return res.status(400).json({
                success: false,
                error: 'ユーザー情報が不完全です'
              });
            }

            // 固定金額の設定（10,000円）
            const amount = 10000;
            const currency = 'jpy';
            const description = 'ライフサイクル・ポテンシャル占術 詳細鑑定PDF';

            // 決済処理をタイムアウトと競争
            const chargeResult = await Promise.race([
              createCharge({
                token,
                amount,
                currency,
                description,
                metadata: {
                  customer_name: userData.name,
                  customer_email: userData.email
                }
              }),
              timeoutPromise
            ]);

            // 決済成功時
            if (chargeResult && chargeResult.paid) {
              // トランザクションID生成
              const transactionId = `TRX-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

              return res.status(200).json({
                success: true,
                message: '決済が完了しました。PDF生成リクエストを開始してください。',
                transactionId,
                chargeId: chargeResult.id
              });
            } else {
              // 決済が未完了またはエラー
              return res.status(400).json({
                success: false,
                error: '決済処理に失敗しました',
                details: chargeResult
              });
            }
          } catch (error) {
            // エラー処理...
            return res.status(500).json({
              success: false,
              error: '決済処理中にサーバーエラーが発生しました',
              message: process.env.NODE_ENV === 'development' ? error.message : '内部サーバーエラー'
            });
          }
        }

configuration:
  environment_variables:
    frontend:
      - name: "PAYJP_PUBLIC_KEY"
        description: "Pay.jpの公開鍵 (pk_test_* または pk_live_*)"
        example: "pk_test_0383a1b8f91e8a6e3ea0e2a9"
    backend:
      - name: "PAYJP_SECRET_KEY"
        description: "Pay.jpの秘密鍵 (sk_test_* または sk_live_*)"
        example: "sk_test_c62fade9d045b54cd76d7036"
        security_note: "秘密鍵は環境変数として安全に保存し、コードにハードコーディングしないこと"

  payment_flow:
    steps:
      - "ユーザーが入力フォームでカード情報を入力"
      - "Pay.jpのJavaScript SDKがカード情報をトークン化"
      - "トークンがサーバーに送信され、秘密鍵を使って決済処理"
      - "決済成功時、PDF生成プロセスが開始"
      - "決済完了の確認画面とPDF生成進捗表示"

security:
  best_practices:
    - "カード情報は自社サーバーを通さず、Pay.jpのサーバーで直接トークン化"
    - "フロントエンドでは公開鍵のみを使用し、秘密鍵はバックエンドでのみ使用"
    - "HTTPSによる通信の暗号化"
    - "トークンの一時的な使用（使い捨て）"
    - "環境変数による機密情報の管理"

testing:
  test_cards:
    - number: "4242424242424242"
      brand: "Visa"
      description: "正常に決済が完了するテストカード"
    - number: "4000000000000070"
      brand: "Visa"
      description: "暗証番号が間違っているテストカード"
    - number: "4000000000000100"
      brand: "Visa"
      description: "一時的なエラーが発生するテストカード"

  environments:
    - name: "テスト環境"
      api_base: "https://api.pay.jp/v1/"
      description: "テスト用APIキーを使用する環境。実際の課金は発生しない"
    - name: "本番環境"
      api_base: "https://api.pay.jp/v1/"
      description: "本番用APIキーを使用する環境。実際の課金が発生するため、慎重に扱うこと"

deployment:
  considerations:
    - "テスト環境から本番環境への移行時にAPIキーの更新を確実に行う"
    - "本番環境ではWebhookの設定を推奨（非同期処理の信頼性向上）"
    - "決済失敗時のフォールバック処理の実装"
    - "監視とログ記録の設定（決済エラーの検出と追跡）"